{"ast":null,"code":"// Define an object for number operations\nconst numberHandlerExercise1 = {\n  numbers: [10, 20, 30, 40, 50],\n  // Method to calculate the average of all numbers in the array\n  calculateAverage() {\n    // TODO: Implement a method to calculate the average of all numbers in the array\n    let sum = 0;\n    this.numbers.map(num => sum = sum + num);\n    return sum;\n  },\n  // Method to find the median of the array\n  findMedian() {\n    // TODO: Implement a method to find the median of the array\n  },\n  // Method to find the mode of the array\n  findMode() {\n    // TODO: Implement a method to find the mode of the array\n  },\n  // Method to raise each number to the power of 3\n  powerOfThree() {\n    // TODO: Implement a method to raise each number to the power of 3\n  },\n  // Method to calculate the factorial of each number in the array\n  calculateFactorials() {\n    // TODO: Implement a method to calculate the factorial of each number in the array\n  },\n  // Method to demonstrate asynchronous operation using promises\n  asyncOperation() {\n    // TODO: Implement an asynchronous operation using promises\n  },\n  // Method to demonstrate type coercion\n  typeCoercionDemo() {\n    // TODO: Implement a demonstration of type coercion\n  }\n};\n// Test the number methods\nconsole.log('Average:', numberHandlerExercise1.calculateAverage());\nconsole.log('Median:', numberHandlerExercise1.findMedian());\nconsole.log('Mode:', numberHandlerExercise1.findMode());\nnumberHandlerExercise1.powerOfThree();\nconsole.log('Numbers after power of three:', numberHandlerExercise1.numbers);\nnumberHandlerExercise1.calculateFactorials();\nconsole.log('Factorials:', numberHandlerExercise1.numbers);\n// Demonstrate asynchronous operation with promises\nnumberHandlerExercise1.asyncOperation().then(result => {\n  console.log(result);\n});\n// Demonstrate type coercion\nnumberHandlerExercise1.typeCoercionDemo();\nconsole.log('End of script execution. Event loop continues...');","map":{"version":3,"names":["numberHandlerExercise1","numbers","calculateAverage","sum","map","num","findMedian","findMode","powerOfThree","calculateFactorials","asyncOperation","typeCoercionDemo","console","log","then","result"],"sources":["/home/hassanwaqar/Github/React-Tasks/src/App.js"],"sourcesContent":["// Define an object for number operations\nconst numberHandlerExercise1 = {\n  numbers: [10, 20, 30, 40, 50],\n  // Method to calculate the average of all numbers in the array\n  calculateAverage() {\n    // TODO: Implement a method to calculate the average of all numbers in the array\n    let sum = 0\n    this.numbers.map((num) => sum = sum + num)\n    return sum\n  },\n  // Method to find the median of the array\n  findMedian() {\n    // TODO: Implement a method to find the median of the array\n  },\n  // Method to find the mode of the array\n  findMode() {\n    // TODO: Implement a method to find the mode of the array\n  },\n  // Method to raise each number to the power of 3\n  powerOfThree() {\n    // TODO: Implement a method to raise each number to the power of 3\n  },\n  // Method to calculate the factorial of each number in the array\n  calculateFactorials() {\n    // TODO: Implement a method to calculate the factorial of each number in the array\n  },\n  // Method to demonstrate asynchronous operation using promises\n  asyncOperation() {\n    // TODO: Implement an asynchronous operation using promises\n  },\n  // Method to demonstrate type coercion\n  typeCoercionDemo() {\n    // TODO: Implement a demonstration of type coercion\n  }\n};\n// Test the number methods\nconsole.log('Average:', numberHandlerExercise1.calculateAverage());\nconsole.log('Median:', numberHandlerExercise1.findMedian());\nconsole.log('Mode:', numberHandlerExercise1.findMode());\nnumberHandlerExercise1.powerOfThree();\nconsole.log('Numbers after power of three:', numberHandlerExercise1.numbers);\nnumberHandlerExercise1.calculateFactorials();\nconsole.log('Factorials:', numberHandlerExercise1.numbers);\n// Demonstrate asynchronous operation with promises\nnumberHandlerExercise1.asyncOperation()\n    .then(result => {\n      console.log(result);\n    });\n// Demonstrate type coercion\nnumberHandlerExercise1.typeCoercionDemo();\nconsole.log('End of script execution. Event loop continues...');"],"mappings":"AAAA;AACA,MAAMA,sBAAsB,GAAG;EAC7BC,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAC7B;EACAC,gBAAgBA,CAAA,EAAG;IACjB;IACA,IAAIC,GAAG,GAAG,CAAC;IACX,IAAI,CAACF,OAAO,CAACG,GAAG,CAAEC,GAAG,IAAKF,GAAG,GAAGA,GAAG,GAAGE,GAAG,CAAC;IAC1C,OAAOF,GAAG;EACZ,CAAC;EACD;EACAG,UAAUA,CAAA,EAAG;IACX;EAAA,CACD;EACD;EACAC,QAAQA,CAAA,EAAG;IACT;EAAA,CACD;EACD;EACAC,YAAYA,CAAA,EAAG;IACb;EAAA,CACD;EACD;EACAC,mBAAmBA,CAAA,EAAG;IACpB;EAAA,CACD;EACD;EACAC,cAAcA,CAAA,EAAG;IACf;EAAA,CACD;EACD;EACAC,gBAAgBA,CAAA,EAAG;IACjB;EAAA;AAEJ,CAAC;AACD;AACAC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEb,sBAAsB,CAACE,gBAAgB,CAAC,CAAC,CAAC;AAClEU,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEb,sBAAsB,CAACM,UAAU,CAAC,CAAC,CAAC;AAC3DM,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEb,sBAAsB,CAACO,QAAQ,CAAC,CAAC,CAAC;AACvDP,sBAAsB,CAACQ,YAAY,CAAC,CAAC;AACrCI,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEb,sBAAsB,CAACC,OAAO,CAAC;AAC5ED,sBAAsB,CAACS,mBAAmB,CAAC,CAAC;AAC5CG,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEb,sBAAsB,CAACC,OAAO,CAAC;AAC1D;AACAD,sBAAsB,CAACU,cAAc,CAAC,CAAC,CAClCI,IAAI,CAACC,MAAM,IAAI;EACdH,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC;AACrB,CAAC,CAAC;AACN;AACAf,sBAAsB,CAACW,gBAAgB,CAAC,CAAC;AACzCC,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}