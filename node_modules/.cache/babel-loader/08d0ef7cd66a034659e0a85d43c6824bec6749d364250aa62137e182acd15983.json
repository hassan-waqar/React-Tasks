{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Initial state\nconst initialState = {\n  userAuthenticated: false,\n  adminAuthenticated: false\n};\n\n// Slice\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    // Action to set user authentication status\n    setUserAuthenticated(state, action) {\n      state.userAuthenticated = action.payload;\n      if (action.payload) {\n        state.adminAuthenticated = false; // Reset admin authentication if user authenticates\n      }\n    },\n    // Action to set admin authentication status\n    setAdminAuthenticated(state, action) {\n      state.adminAuthenticated = action.payload;\n      if (action.payload) {\n        state.userAuthenticated = false; // Reset user authentication if admin authenticates\n      }\n    }\n  }\n});\n\n// // Selectors (optional)\n// export const selectUserAuthenticated = state => state.auth.userAuthenticated;\n// export const selectAdminAuthenticated = state => state.auth.adminAuthenticated;\n\n// Actions\nexport const {\n  setUserAuthenticated,\n  setAdminAuthenticated\n} = authSlice.actions;\n\n// Reducer\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","userAuthenticated","adminAuthenticated","authSlice","name","reducers","setUserAuthenticated","state","action","payload","setAdminAuthenticated","actions","reducer"],"sources":["/home/hassanwaqar/Github/React-Tasks/src/redux/auth.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// Initial state\nconst initialState = {\n    userAuthenticated: false,\n    adminAuthenticated: false\n};\n\n// Slice\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        // Action to set user authentication status\n        setUserAuthenticated(state, action) {\n            state.userAuthenticated = action.payload;\n            if (action.payload) {\n                state.adminAuthenticated = false; // Reset admin authentication if user authenticates\n            }\n        },\n        // Action to set admin authentication status\n        setAdminAuthenticated(state, action) {\n            state.adminAuthenticated = action.payload;\n            if (action.payload) {\n                state.userAuthenticated = false; // Reset user authentication if admin authenticates\n            }\n        }\n    }\n});\n\n// // Selectors (optional)\n// export const selectUserAuthenticated = state => state.auth.userAuthenticated;\n// export const selectAdminAuthenticated = state => state.auth.adminAuthenticated;\n\n// Actions\nexport const { setUserAuthenticated, setAdminAuthenticated } = authSlice.actions;\n\n// Reducer\nexport default authSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAG;EACjBC,iBAAiB,EAAE,KAAK;EACxBC,kBAAkB,EAAE;AACxB,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC1BK,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE;IACN;IACAC,oBAAoBA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAChCD,KAAK,CAACN,iBAAiB,GAAGO,MAAM,CAACC,OAAO;MACxC,IAAID,MAAM,CAACC,OAAO,EAAE;QAChBF,KAAK,CAACL,kBAAkB,GAAG,KAAK,CAAC,CAAC;MACtC;IACJ,CAAC;IACD;IACAQ,qBAAqBA,CAACH,KAAK,EAAEC,MAAM,EAAE;MACjCD,KAAK,CAACL,kBAAkB,GAAGM,MAAM,CAACC,OAAO;MACzC,IAAID,MAAM,CAACC,OAAO,EAAE;QAChBF,KAAK,CAACN,iBAAiB,GAAG,KAAK,CAAC,CAAC;MACrC;IACJ;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA,OAAO,MAAM;EAAEK,oBAAoB;EAAEI;AAAsB,CAAC,GAAGP,SAAS,CAACQ,OAAO;;AAEhF;AACA,eAAeR,SAAS,CAACS,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}