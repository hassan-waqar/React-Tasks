{"ast":null,"code":"// Define an object for number operations\nconst numberHandlerExercise1 = {\n  numbers: [10, 20, 30, 40, 50],\n  // Method to calculate the average of all numbers in the array\n  calculateAverage() {\n    // TODO: Implement a method to calculate the average of all numbers in the array\n    let sum = 0;\n    this.numbers.map(num => sum = sum + num);\n    return sum / this.numbers.length;\n  },\n  // Method to find the median of the array\n  findMedian() {\n    let sortedNumbers = this.numbers.sort();\n    if (sortedNumbers.length % 2 === 0) {\n      let middleElement = sortedNumbers.length / 2;\n      return (sortedNumbers[middleElement - 1] + sortedNumbers[middleElement]) / 2;\n    } else {\n      let middleElement = (sortedNumbers.length - 1) / 2;\n      return sortedNumbers[middleElement];\n    }\n  },\n  // Method to find the mode of the array\n  findMode() {\n    // TODO: Implement a method to find the mode of the array\n    let obj = {};\n    for (let i = 0; i < this.numbers.length; i++) {\n      if (this.numbers[i] in obj) {\n        obj[this.numbers[i]] = obj[this.numbers[i]] + 1;\n      } else {\n        obj[this.numbers[i]] = 0;\n      }\n    }\n    let maximum = 0;\n    let mode = -1;\n    for (let key in obj) {\n      if (obj[key] > maximum) {\n        maximum = obj[key];\n        mode = key;\n      }\n    }\n    return mode;\n  },\n  // Method to raise each number to the power of 3\n  powerOfThree() {\n    // TODO: Implement a method to raise each number to the power of 3\n\n    let arr = [];\n    for (let i = 0; i < this.numbers.length; i++) {\n      arr[i] = this.numbers[i] * this.numbers[i] * this.numbers[i];\n    }\n    return arr;\n  },\n  // Method to calculate the factorial of each number in the array\n  calculateFactorials() {\n    // TODO: Implement a method to calculate the factorial of each number in the array\n  },\n  // Method to demonstrate asynchronous operation using promises\n  asyncOperation() {\n    // TODO: Implement an asynchronous operation using promises\n  },\n  // Method to demonstrate type coercion\n  typeCoercionDemo() {\n    // TODO: Implement a demonstration of type coercion\n  }\n};\n// Test the number methods\nconsole.log('Average:', numberHandlerExercise1.calculateAverage());\nconsole.log('Median:', numberHandlerExercise1.findMedian());\nconsole.log('Mode:', numberHandlerExercise1.findMode());\nnumberHandlerExercise1.powerOfThree();\nconsole.log('Numbers after power of three:', numberHandlerExercise1.numbers);\nnumberHandlerExercise1.calculateFactorials();\nconsole.log('Factorials:', numberHandlerExercise1.numbers);\n// Demonstrate asynchronous operation with promises\nnumberHandlerExercise1.asyncOperation().then(result => {\n  console.log(result);\n});\n// Demonstrate type coercion\nnumberHandlerExercise1.typeCoercionDemo();\nconsole.log('End of script execution. Event loop continues...');","map":{"version":3,"names":["numberHandlerExercise1","numbers","calculateAverage","sum","map","num","length","findMedian","sortedNumbers","sort","middleElement","findMode","obj","i","maximum","mode","key","powerOfThree","arr","calculateFactorials","asyncOperation","typeCoercionDemo","console","log","then","result"],"sources":["/home/hassanwaqar/Github/React-Tasks/src/App.js"],"sourcesContent":["// Define an object for number operations\nconst numberHandlerExercise1 = {\n  numbers: [10, 20, 30, 40, 50],\n  // Method to calculate the average of all numbers in the array\n  calculateAverage() {\n    // TODO: Implement a method to calculate the average of all numbers in the array\n    let sum = 0\n    this.numbers.map((num) => sum = sum + num)\n    return sum/this.numbers.length\n  },\n  // Method to find the median of the array\n  findMedian() {\n    let sortedNumbers = this.numbers.sort()\n    if (sortedNumbers.length % 2 === 0){\n      let middleElement = sortedNumbers.length / 2\n      return (sortedNumbers[middleElement -1] + sortedNumbers[middleElement]) / 2\n    }else{\n      let middleElement = (sortedNumbers.length - 1) / 2\n      return sortedNumbers[middleElement]\n    }\n\n  },\n  // Method to find the mode of the array\n  findMode() {\n    // TODO: Implement a method to find the mode of the array\n    let obj = {}\n    for (let i = 0; i < this.numbers.length; i++) {\n      if(this.numbers[i] in obj){\n        obj[this.numbers[i]] = obj[this.numbers[i]] + 1\n      }else{\n        obj[this.numbers[i]] = 0\n      }\n    }\n    let maximum = 0\n    let mode = -1\n    for (let key in obj){\n      if(obj[key] > maximum){\n        maximum = obj[key]\n        mode = key\n      }\n    }\n\n    return mode\n  },\n  // Method to raise each number to the power of 3\n  powerOfThree() {\n    // TODO: Implement a method to raise each number to the power of 3\n\n    let arr = []\n    for(let i = 0; i < this.numbers.length; i++){\n      arr[i] = this.numbers[i] * this.numbers[i] * this.numbers[i]\n    }\n    return arr\n  },\n  // Method to calculate the factorial of each number in the array\n  calculateFactorials() {\n    // TODO: Implement a method to calculate the factorial of each number in the array\n  },\n  // Method to demonstrate asynchronous operation using promises\n  asyncOperation() {\n    // TODO: Implement an asynchronous operation using promises\n  },\n  // Method to demonstrate type coercion\n  typeCoercionDemo() {\n    // TODO: Implement a demonstration of type coercion\n  }\n};\n// Test the number methods\nconsole.log('Average:', numberHandlerExercise1.calculateAverage());\nconsole.log('Median:', numberHandlerExercise1.findMedian());\nconsole.log('Mode:', numberHandlerExercise1.findMode());\nnumberHandlerExercise1.powerOfThree();\nconsole.log('Numbers after power of three:', numberHandlerExercise1.numbers);\nnumberHandlerExercise1.calculateFactorials();\nconsole.log('Factorials:', numberHandlerExercise1.numbers);\n// Demonstrate asynchronous operation with promises\nnumberHandlerExercise1.asyncOperation()\n    .then(result => {\n      console.log(result);\n    });\n// Demonstrate type coercion\nnumberHandlerExercise1.typeCoercionDemo();\nconsole.log('End of script execution. Event loop continues...');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}